#!/usr/bin/env python
# Copyright (c) 2009, Roberto Aguilar <berto at chamaco dot org>
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name, "Roberto Aguilar", nor the names of its contributors may
#   be used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""%s [options] <hostname>

Command for getting SSH host information from DNS.

This command will retrieve SSH connection parameters from TXT entries in DNS.
The DNS entries should be in the following format:

key1:value1,key2:value2[,...]

For example:

Hostname:foo.com,Port:10022,User:foo

Any setting found in the ssh_config manpage is okay to add to this entry.

If that DNS entry was named, "bar" in the domain "foo.com", you could use
the following command:

ssh_dns bar.foo.com

That will, essentially, run the following command:

ssh -p 10022 foo@foo.com

The benefit of this command is realized when there are many ssh aliases you
want to share with a large group of people.  It would be possible to keep all
these entries in /etc/ssh/ssh_config or in one's local ~/.ssh/config file, but
the former requires everyone to have access to the machine with this config
file and the latter becomes a maintenance headache to keep everyone's local
config up to date.  Using DNS, it's possible to update a central location and
have everyone reference it.\
"""

import logging
import os
import re
import shlex
import sys

from itertools import imap
from optparse import OptionParser
from subprocess import Popen, PIPE
from tempfile import NamedTemporaryFile

FAKE_HOSTNAME = 'ssh_dns'

LOG_FORMAT = "%(message)s"
logging.basicConfig(stream=sys.stdout, format=LOG_FORMAT)

def check_domain(hostname, domain):
    """
    if the given hostname does not contain the given domain, return
    hostname.domain
    """

    if domain and domain.lower() not in hostname:
        hostname += '.%s' % (domain,)

    return hostname

def connect(filename, command='ssh', args=''):
    """
    Shell out to ssh for the final connection.
    """

    command = '%s -F %s %s %s' % (command, filename, args, FAKE_HOSTNAME)
    logging.debug(command)
    os.system(command)

def dig(hostname, section='a'):
    """
    Use dig to get the TXT entry from DNS
    """

    command = 'dig %s %s +short' % (hostname, section)
    logging.debug('DNS query: %s' % (command,))
    return run_command(command)

def get_device_info(hostname):
    """
    Create a dictionary from the DNS TXT entry
    """

    response = dig(hostname, section='txt')[0]
    for char in '"':
        response = response.replace(char, '')

    return dict([x.split(':', 1) for x in response.split(',')])

def parse_ssh_config(path):
    """
    Create a dictionary from the given ssh config file
    """

    hosts = {}
    fobj = open(path, 'rb')

    info = {}
    for line in imap(str.strip, fobj):
        if line == '' or line.startswith('#'): continue

        if line.startswith('Host ') and info:
            hosts[info['Host']] = info
            info = {}

        line_split = line.split(' ')
        info[line_split[0]] = line_split[1]

    if info:
        hosts[info['Host']] = info

    return hosts

def run_command(command):
    """
    Return the output of the given command
    """

    pipe = Popen(shlex.split(command), stdin=None, stdout=PIPE, close_fds=True)
    return pipe.communicate()[0].splitlines()

if __name__ == '__main__':
    parser = OptionParser(__doc__ % (os.path.basename(sys.argv[0]),))
    parser.add_option('-c', '--command', default='ssh',
                      help='Command to run, default: ssh')
    parser.add_option('-d', '--domain',
                      help='Append this domain to the given host')
    parser.add_option('-m', '--merge-config', action='append',
                      help='Merge the given config from ~/.ssh/config')
    parser.add_option('-v', '--verbose', action='store_true',
                      help='Whether to show additional information')

    options, args = parser.parse_args()

    if options.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    else:
        logging.getLogger().setLevel(logging.INFO)

    try:
        hostname = args[0].lower()
    except IndexError:
        parser.print_help()
        sys.exit('Error: no hostname given')

    domain = options.domain
    hostname = check_domain(hostname, domain)

    info = get_device_info(hostname)

    if options.merge_config:
        path = os.path.expanduser('~/.ssh/config')
        ssh_config = parse_ssh_config(path)

        for item in options.merge_config:
            config = ssh_config.get(item)
            if config:
                info.update(config)
            else:
                # try to find entry in DNS
                t_item = check_domain(item, domain)
                t_info = get_device_info(t_item)

                if t_info:
                    info.update(t_info)
                else:
                    print 'WARNING: config %s not found' % (item,)

    info.pop('Host', None)

    fobj = NamedTemporaryFile()

    fobj.write('Host %s\n' % (FAKE_HOSTNAME,))
    for k, v in info.iteritems():
        fobj.write('  %s %s\n' % (k, v))

    fobj.flush()

    if options.verbose:
        logging.debug('%s:' % (fobj.name,))
        fobj.seek(0,0)
        logging.debug(fobj.read())

    connect(fobj.name, command=options.command, args=' '.join(args[1:]))
